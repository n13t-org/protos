syntax = "proto3";

package n13t.idm.v0;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "user.proto";


/**
 * Identity Management Service - manage user's private information
 */
service IdentityManagement {
    rpc CreateUser(User) returns (google.protobuf.Empty) {
        option (google.api.http) = {
			post: "/v0/users"
			body: "*"
		};
    }
    /// the default rpc use for listing users
    rpc ListUsersStream(ListUsersRequest) returns (stream User) {
        option (google.api.http) = {
			get: "/v0/users"
		};
    }
    rpc UpdateUser(User) returns (google.protobuf.Empty) {
        option (google.api.http) = {
			put: "/v0/users/{sub}"
			body: "*"
		};
    }
    rpc DeleteUser(User) returns (google.protobuf.Empty) {
        option (google.api.http) = {
			delete: "/v0/users/{sub}"
		};
    }

    // https://github.com/grpc/grpc/blob/master/doc/health-checking.md
    rpc Check(HealthCheckRequest) returns (HealthCheckResponse) {
        option (google.api.http) = {
			get: "/v0/health"
		};
    };
    rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);
}

message HealthCheckRequest {
    string service = 1;
}

message HealthCheckResponse {
    enum ServingStatus {
        UNKNOWN = 0;
        SERVING = 1;
        NOT_SERVING = 2;
    }
    ServingStatus status = 1;
}

message ListUsersRequest {
    string search = 1;
}

message SearchRequest {
    string query = 1;
    int32 page_number = 2;
    int32 result_per_page = 3;
}
