// Code generated by protoc-gen-go. DO NOT EDIT.
// source: n13t/idm/v0/idm.proto

package n13t_idm_v0

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IsValidRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsValidRequest) Reset()         { *m = IsValidRequest{} }
func (m *IsValidRequest) String() string { return proto.CompactTextString(m) }
func (*IsValidRequest) ProtoMessage()    {}
func (*IsValidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e677661a4128a4, []int{0}
}

func (m *IsValidRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsValidRequest.Unmarshal(m, b)
}
func (m *IsValidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsValidRequest.Marshal(b, m, deterministic)
}
func (m *IsValidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsValidRequest.Merge(m, src)
}
func (m *IsValidRequest) XXX_Size() int {
	return xxx_messageInfo_IsValidRequest.Size(m)
}
func (m *IsValidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsValidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsValidRequest proto.InternalMessageInfo

func (m *IsValidRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IsValidRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type IsValidResponse struct {
	V                    bool     `protobuf:"varint,1,opt,name=v,proto3" json:"v,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsValidResponse) Reset()         { *m = IsValidResponse{} }
func (m *IsValidResponse) String() string { return proto.CompactTextString(m) }
func (*IsValidResponse) ProtoMessage()    {}
func (*IsValidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e677661a4128a4, []int{1}
}

func (m *IsValidResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsValidResponse.Unmarshal(m, b)
}
func (m *IsValidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsValidResponse.Marshal(b, m, deterministic)
}
func (m *IsValidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsValidResponse.Merge(m, src)
}
func (m *IsValidResponse) XXX_Size() int {
	return xxx_messageInfo_IsValidResponse.Size(m)
}
func (m *IsValidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsValidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsValidResponse proto.InternalMessageInfo

func (m *IsValidResponse) GetV() bool {
	if m != nil {
		return m.V
	}
	return false
}

func (m *IsValidResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*IsValidRequest)(nil), "n13t.idm.v0.IsValidRequest")
	proto.RegisterType((*IsValidResponse)(nil), "n13t.idm.v0.IsValidResponse")
}

func init() {
	proto.RegisterFile("n13t/idm/v0/idm.proto", fileDescriptor_c4e677661a4128a4)
}

var fileDescriptor_c4e677661a4128a4 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0x87, 0x53, 0xde, 0x37, 0x08, 0xa3, 0x41, 0xb3, 0x89, 0x06, 0x57, 0x45, 0xc3, 0xc9, 0x53,
	0x01, 0xb9, 0x7a, 0x31, 0xe2, 0x01, 0x23, 0x17, 0x0c, 0xde, 0x57, 0x76, 0xa2, 0x9b, 0xc0, 0xb6,
	0xee, 0x2c, 0x35, 0x7c, 0x0e, 0xbf, 0xb0, 0x69, 0xbb, 0xf4, 0x8f, 0x59, 0x4e, 0xed, 0xfe, 0x9e,
	0x99, 0xa7, 0x93, 0xe9, 0xc2, 0xa9, 0x1e, 0x8d, 0xed, 0x40, 0xc9, 0xf5, 0x20, 0x19, 0xa6, 0x8f,
	0x30, 0x36, 0x91, 0x8d, 0xd8, 0x61, 0x1a, 0x87, 0xe9, 0x39, 0x19, 0xf2, 0xb3, 0x6a, 0xcd, 0x86,
	0xd0, 0xe4, 0x45, 0xbc, 0x5b, 0xcd, 0x09, 0x85, 0x59, 0x7e, 0x3a, 0x52, 0xeb, 0x58, 0x29, 0xb2,
	0x2e, 0x3f, 0xaf, 0xe6, 0xd6, 0x08, 0x4d, 0xca, 0xa1, 0xfe, 0x3d, 0x74, 0xa6, 0xf4, 0x26, 0x56,
	0x4a, 0xce, 0xf1, 0x6b, 0x83, 0x64, 0x59, 0x07, 0x1a, 0x4a, 0x76, 0x83, 0x9b, 0xe0, 0xb6, 0x3d,
	0x6f, 0x28, 0xc9, 0x38, 0xb4, 0x62, 0x41, 0xf4, 0x1d, 0x19, 0xd9, 0x6d, 0x64, 0x69, 0x71, 0xee,
	0x8f, 0xe0, 0xb8, 0xe8, 0xa6, 0x38, 0xd2, 0x84, 0xec, 0x08, 0x82, 0x24, 0xeb, 0x6e, 0xcd, 0x83,
	0x84, 0x9d, 0xc0, 0x3f, 0x34, 0xc6, 0xf5, 0xa5, 0xaf, 0x77, 0x3f, 0xff, 0x81, 0x4d, 0x25, 0x6a,
	0xab, 0xec, 0x76, 0x26, 0xb4, 0xf8, 0xc0, 0x35, 0x6a, 0xcb, 0x66, 0x00, 0x8f, 0x06, 0x85, 0xc5,
	0x05, 0xa1, 0x61, 0xbd, 0xb0, 0xb2, 0x88, 0xb0, 0x04, 0x6e, 0x46, 0x7e, 0xbd, 0x97, 0xbb, 0x29,
	0x66, 0x00, 0x8b, 0x58, 0xfa, 0x75, 0x25, 0xf0, 0xeb, 0xaa, 0xdc, 0xe9, 0x1e, 0xa0, 0xf9, 0x9a,
	0x2d, 0x9a, 0xf1, 0x5a, 0x69, 0x1e, 0xee, 0x34, 0x17, 0x5e, 0xe6, 0x14, 0xcf, 0xd0, 0x7e, 0x51,
	0x64, 0x53, 0x2d, 0xb1, 0xab, 0x5a, 0x65, 0x91, 0xef, 0x44, 0xbd, 0x7d, 0xd8, 0xb9, 0x26, 0x70,
	0xe0, 0xd6, 0xce, 0xea, 0xdf, 0xac, 0xff, 0x4a, 0x7e, 0xe9, 0x87, 0xa5, 0xe5, 0x49, 0x2f, 0xcd,
	0x36, 0xb6, 0x7f, 0x2c, 0x2e, 0xf5, 0x5b, 0x0a, 0x58, 0x5a, 0x26, 0xe8, 0xb3, 0xb8, 0xd4, 0x6f,
	0x29, 0x60, 0x6e, 0x79, 0x6f, 0x66, 0xb7, 0x71, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x56, 0xaa,
	0x09, 0x3e, 0x18, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IdentityManagementClient is the client API for IdentityManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdentityManagementClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	//    rpc DeleteUser(User) returns (google.protobuf.Empty) {
	//        option (google.api.http) = {
	//			delete: "/v0/users/{sub}"
	//		};
	//    }
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// for keycloak to check password
	IsValid(ctx context.Context, in *IsValidRequest, opts ...grpc.CallOption) (*IsValidResponse, error)
	// transit engine
	Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error)
	Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error)
}

type identityManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityManagementClient(cc grpc.ClientConnInterface) IdentityManagementClient {
	return &identityManagementClient{cc}
}

func (c *identityManagementClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/n13t.idm.v0.IdentityManagement/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/n13t.idm.v0.IdentityManagement/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/n13t.idm.v0.IdentityManagement/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/n13t.idm.v0.IdentityManagement/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementClient) IsValid(ctx context.Context, in *IsValidRequest, opts ...grpc.CallOption) (*IsValidResponse, error) {
	out := new(IsValidResponse)
	err := c.cc.Invoke(ctx, "/n13t.idm.v0.IdentityManagement/IsValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementClient) Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error) {
	out := new(EncryptResponse)
	err := c.cc.Invoke(ctx, "/n13t.idm.v0.IdentityManagement/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementClient) Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error) {
	out := new(DecryptResponse)
	err := c.cc.Invoke(ctx, "/n13t.idm.v0.IdentityManagement/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityManagementServer is the server API for IdentityManagement service.
type IdentityManagementServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	//    rpc DeleteUser(User) returns (google.protobuf.Empty) {
	//        option (google.api.http) = {
	//			delete: "/v0/users/{sub}"
	//		};
	//    }
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// for keycloak to check password
	IsValid(context.Context, *IsValidRequest) (*IsValidResponse, error)
	// transit engine
	Encrypt(context.Context, *EncryptRequest) (*EncryptResponse, error)
	Decrypt(context.Context, *DecryptRequest) (*DecryptResponse, error)
}

// UnimplementedIdentityManagementServer can be embedded to have forward compatible implementations.
type UnimplementedIdentityManagementServer struct {
}

func (*UnimplementedIdentityManagementServer) CreateUser(ctx context.Context, req *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedIdentityManagementServer) UpdateUser(ctx context.Context, req *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedIdentityManagementServer) Search(ctx context.Context, req *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedIdentityManagementServer) ListUsers(ctx context.Context, req *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedIdentityManagementServer) IsValid(ctx context.Context, req *IsValidRequest) (*IsValidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValid not implemented")
}
func (*UnimplementedIdentityManagementServer) Encrypt(ctx context.Context, req *EncryptRequest) (*EncryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (*UnimplementedIdentityManagementServer) Decrypt(ctx context.Context, req *DecryptRequest) (*DecryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}

func RegisterIdentityManagementServer(s *grpc.Server, srv IdentityManagementServer) {
	s.RegisterService(&_IdentityManagement_serviceDesc, srv)
}

func _IdentityManagement_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n13t.idm.v0.IdentityManagement/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagement_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n13t.idm.v0.IdentityManagement/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagement_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n13t.idm.v0.IdentityManagement/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagement_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n13t.idm.v0.IdentityManagement/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagement_IsValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsValidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementServer).IsValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n13t.idm.v0.IdentityManagement/IsValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementServer).IsValid(ctx, req.(*IsValidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagement_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n13t.idm.v0.IdentityManagement/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementServer).Encrypt(ctx, req.(*EncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagement_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n13t.idm.v0.IdentityManagement/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementServer).Decrypt(ctx, req.(*DecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentityManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "n13t.idm.v0.IdentityManagement",
	HandlerType: (*IdentityManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _IdentityManagement_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _IdentityManagement_UpdateUser_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _IdentityManagement_Search_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _IdentityManagement_ListUsers_Handler,
		},
		{
			MethodName: "IsValid",
			Handler:    _IdentityManagement_IsValid_Handler,
		},
		{
			MethodName: "Encrypt",
			Handler:    _IdentityManagement_Encrypt_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _IdentityManagement_Decrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "n13t/idm/v0/idm.proto",
}
