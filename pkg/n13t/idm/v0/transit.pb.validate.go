// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: n13t/idm/v0/transit.proto

package n13t_idm_v0

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _transit_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on EncryptRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EncryptRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Plaintext

	return nil
}

// EncryptRequestValidationError is the validation error returned by
// EncryptRequest.Validate if the designated constraints aren't met.
type EncryptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EncryptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EncryptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EncryptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EncryptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EncryptRequestValidationError) ErrorName() string { return "EncryptRequestValidationError" }

// Error satisfies the builtin error interface
func (e EncryptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEncryptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EncryptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EncryptRequestValidationError{}

// Validate checks the field values on EncryptResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EncryptResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ciphertext

	return nil
}

// EncryptResponseValidationError is the validation error returned by
// EncryptResponse.Validate if the designated constraints aren't met.
type EncryptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EncryptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EncryptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EncryptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EncryptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EncryptResponseValidationError) ErrorName() string { return "EncryptResponseValidationError" }

// Error satisfies the builtin error interface
func (e EncryptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEncryptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EncryptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EncryptResponseValidationError{}

// Validate checks the field values on DecryptRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DecryptRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ciphertext

	return nil
}

// DecryptRequestValidationError is the validation error returned by
// DecryptRequest.Validate if the designated constraints aren't met.
type DecryptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecryptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecryptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecryptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecryptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecryptRequestValidationError) ErrorName() string { return "DecryptRequestValidationError" }

// Error satisfies the builtin error interface
func (e DecryptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecryptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecryptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecryptRequestValidationError{}

// Validate checks the field values on DecryptResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DecryptResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Plaintext

	return nil
}

// DecryptResponseValidationError is the validation error returned by
// DecryptResponse.Validate if the designated constraints aren't met.
type DecryptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecryptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecryptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecryptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecryptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecryptResponseValidationError) ErrorName() string { return "DecryptResponseValidationError" }

// Error satisfies the builtin error interface
func (e DecryptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecryptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecryptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecryptResponseValidationError{}
