// Code generated by protoc-gen-go. DO NOT EDIT.
// source: n13t/devops/v0/webhook.proto

package n13t_devops_v0

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	v4 "n13t/gitlab/v4"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("n13t/devops/v0/webhook.proto", fileDescriptor_ce4601dc759326b7)
}

var fileDescriptor_ce4601dc759326b7 = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0xcd, 0x31, 0x0f, 0x82, 0x40,
	0x0c, 0x05, 0xe0, 0x0d, 0x13, 0x06, 0x07, 0x06, 0x87, 0x93, 0xc9, 0xdd, 0x16, 0x85, 0xdd, 0x45,
	0x12, 0x9d, 0x1c, 0x99, 0xbd, 0x58, 0x4f, 0x03, 0xd2, 0x8b, 0x9c, 0x35, 0xfe, 0x7b, 0x73, 0xd7,
	0x30, 0xbe, 0xbc, 0xd7, 0xaf, 0x79, 0x39, 0xee, 0xea, 0x80, 0x37, 0x12, 0xf6, 0x13, 0x4a, 0x85,
	0x5f, 0xb2, 0x0f, 0xe6, 0x1e, 0xfc, 0x9b, 0x03, 0x17, 0xcb, 0xd8, 0x82, 0xb6, 0x20, 0x95, 0xd9,
	0xa4, 0xb5, 0x7b, 0x86, 0xe1, 0x6a, 0x51, 0x9a, 0x79, 0xbd, 0x25, 0xa1, 0x31, 0xe8, 0x8d, 0x59,
	0x3b, 0x66, 0x37, 0x10, 0xa6, 0x64, 0x3f, 0x77, 0xa4, 0x97, 0x0f, 0x3f, 0x2d, 0xf7, 0xe7, 0x3c,
	0x3b, 0x92, 0x5c, 0xfc, 0x54, 0x1c, 0xf2, 0x45, 0x47, 0xf6, 0xc4, 0xdc, 0x17, 0x25, 0xa4, 0x37,
	0xca, 0x82, 0x34, 0xd0, 0x29, 0xdb, 0x46, 0xd5, 0xac, 0x40, 0x41, 0x98, 0x41, 0x68, 0x23, 0x68,
	0xb3, 0x94, 0xeb, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0xa5, 0xd3, 0x80, 0xc2, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DevOpsClient is the client API for DevOps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DevOpsClient interface {
	WebHook(ctx context.Context, in *v4.WebhookEvent, opts ...grpc.CallOption) (*empty.Empty, error)
}

type devOpsClient struct {
	cc grpc.ClientConnInterface
}

func NewDevOpsClient(cc grpc.ClientConnInterface) DevOpsClient {
	return &devOpsClient{cc}
}

func (c *devOpsClient) WebHook(ctx context.Context, in *v4.WebhookEvent, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/n13t.devops.v0.DevOps/WebHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevOpsServer is the server API for DevOps service.
type DevOpsServer interface {
	WebHook(context.Context, *v4.WebhookEvent) (*empty.Empty, error)
}

// UnimplementedDevOpsServer can be embedded to have forward compatible implementations.
type UnimplementedDevOpsServer struct {
}

func (*UnimplementedDevOpsServer) WebHook(ctx context.Context, req *v4.WebhookEvent) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebHook not implemented")
}

func RegisterDevOpsServer(s *grpc.Server, srv DevOpsServer) {
	s.RegisterService(&_DevOps_serviceDesc, srv)
}

func _DevOps_WebHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v4.WebhookEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevOpsServer).WebHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n13t.devops.v0.DevOps/WebHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevOpsServer).WebHook(ctx, req.(*v4.WebhookEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _DevOps_serviceDesc = grpc.ServiceDesc{
	ServiceName: "n13t.devops.v0.DevOps",
	HandlerType: (*DevOpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WebHook",
			Handler:    _DevOps_WebHook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "n13t/devops/v0/webhook.proto",
}
