// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comstar.proto

package nghinhut_comstar

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Event_Type int32

const (
	Event_LOG Event_Type = 0
	// Outgoing SMS
	Event_SMS_CREATED Event_Type = 10
	Event_SMS_QUEUED  Event_Type = 20
	Event_SMS_SENDING Event_Type = 21
	Event_SMS_SENT    Event_Type = 23
	Event_SMS_FAILED  Event_Type = 25
	// Incoming SMS
	Event_SMS_RECEIVED Event_Type = 30
	// for runner
	Event_RUNNER_STATUS_CHANGES Event_Type = 40
)

var Event_Type_name = map[int32]string{
	0:  "LOG",
	10: "SMS_CREATED",
	20: "SMS_QUEUED",
	21: "SMS_SENDING",
	23: "SMS_SENT",
	25: "SMS_FAILED",
	30: "SMS_RECEIVED",
	40: "RUNNER_STATUS_CHANGES",
}

var Event_Type_value = map[string]int32{
	"LOG":                   0,
	"SMS_CREATED":           10,
	"SMS_QUEUED":            20,
	"SMS_SENDING":           21,
	"SMS_SENT":              23,
	"SMS_FAILED":            25,
	"SMS_RECEIVED":          30,
	"RUNNER_STATUS_CHANGES": 40,
}

func (x Event_Type) String() string {
	return proto.EnumName(Event_Type_name, int32(x))
}

func (Event_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a9c1fe56b3bd224, []int{1, 0}
}

type Log_Level int32

const (
	Log_DEBUG Log_Level = 0
	Log_INFO  Log_Level = 1
	Log_WARN  Log_Level = 2
	Log_ERROR Log_Level = 3
	Log_TRACE Log_Level = 4
)

var Log_Level_name = map[int32]string{
	0: "DEBUG",
	1: "INFO",
	2: "WARN",
	3: "ERROR",
	4: "TRACE",
}

var Log_Level_value = map[string]int32{
	"DEBUG": 0,
	"INFO":  1,
	"WARN":  2,
	"ERROR": 3,
	"TRACE": 4,
}

func (x Log_Level) String() string {
	return proto.EnumName(Log_Level_name, int32(x))
}

func (Log_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a9c1fe56b3bd224, []int{2, 0}
}

type Sms_Type int32

const (
	Sms_OUTGOING Sms_Type = 0
	Sms_INCOMING Sms_Type = 1
)

var Sms_Type_name = map[int32]string{
	0: "OUTGOING",
	1: "INCOMING",
}

var Sms_Type_value = map[string]int32{
	"OUTGOING": 0,
	"INCOMING": 1,
}

func (x Sms_Type) String() string {
	return proto.EnumName(Sms_Type_name, int32(x))
}

func (Sms_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a9c1fe56b3bd224, []int{3, 0}
}

type HealthCheckResponse_ServingStatus int32

const (
	HealthCheckResponse_UNKNOWN     HealthCheckResponse_ServingStatus = 0
	HealthCheckResponse_SERVING     HealthCheckResponse_ServingStatus = 1
	HealthCheckResponse_NOT_SERVING HealthCheckResponse_ServingStatus = 2
)

var HealthCheckResponse_ServingStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "SERVING",
	2: "NOT_SERVING",
}

var HealthCheckResponse_ServingStatus_value = map[string]int32{
	"UNKNOWN":     0,
	"SERVING":     1,
	"NOT_SERVING": 2,
}

func (x HealthCheckResponse_ServingStatus) String() string {
	return proto.EnumName(HealthCheckResponse_ServingStatus_name, int32(x))
}

func (HealthCheckResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a9c1fe56b3bd224, []int{6, 0}
}

type SubscriptionRequest struct {
	EventTypes           []Event_Type       `protobuf:"varint,1,rep,packed,name=event_types,json=eventTypes,proto3,enum=nghinhut.comstar.Event_Type" json:"event_types,omitempty"`
	Since                *duration.Duration `protobuf:"bytes,2,opt,name=since,proto3" json:"since,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SubscriptionRequest) Reset()         { *m = SubscriptionRequest{} }
func (m *SubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*SubscriptionRequest) ProtoMessage()    {}
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9c1fe56b3bd224, []int{0}
}

func (m *SubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionRequest.Unmarshal(m, b)
}
func (m *SubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionRequest.Marshal(b, m, deterministic)
}
func (m *SubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionRequest.Merge(m, src)
}
func (m *SubscriptionRequest) XXX_Size() int {
	return xxx_messageInfo_SubscriptionRequest.Size(m)
}
func (m *SubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionRequest proto.InternalMessageInfo

func (m *SubscriptionRequest) GetEventTypes() []Event_Type {
	if m != nil {
		return m.EventTypes
	}
	return nil
}

func (m *SubscriptionRequest) GetSince() *duration.Duration {
	if m != nil {
		return m.Since
	}
	return nil
}

type Event struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 Event_Type           `protobuf:"varint,2,opt,name=type,proto3,enum=nghinhut.comstar.Event_Type" json:"type,omitempty"`
	Metadata             map[string]*any.Any  `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data                 *any.Any             `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9c1fe56b3bd224, []int{1}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Event) GetType() Event_Type {
	if m != nil {
		return m.Type
	}
	return Event_LOG
}

func (m *Event) GetMetadata() map[string]*any.Any {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Event) GetData() *any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Event) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type Log struct {
	Level                Log_Level `protobuf:"varint,10,opt,name=level,proto3,enum=nghinhut.comstar.Log_Level" json:"level,omitempty"`
	Message              string    `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9c1fe56b3bd224, []int{2}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetLevel() Log_Level {
	if m != nil {
		return m.Level
	}
	return Log_DEBUG
}

func (m *Log) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Sms struct {
	Id              uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RunnerId        uint32   `protobuf:"varint,2,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	Body            string   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	RecipientNumber string   `protobuf:"bytes,4,opt,name=recipient_number,json=recipientNumber,proto3" json:"recipient_number,omitempty"`
	Type            Sms_Type `protobuf:"varint,5,opt,name=type,proto3,enum=nghinhut.comstar.Sms_Type" json:"type,omitempty"`
	//  enum Status {
	//    CREATED = 0;
	//    QUEUED = 2;
	//    RUNNING = 4;
	//    SUCCESS = 8;
	//    ERROR = 16;
	//  }
	//  Status status = 10;
	//  google.protobuf.Timestamp start_time = 11;
	//  google.protobuf.Timestamp end_time = 12;
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Sms) Reset()         { *m = Sms{} }
func (m *Sms) String() string { return proto.CompactTextString(m) }
func (*Sms) ProtoMessage()    {}
func (*Sms) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9c1fe56b3bd224, []int{3}
}

func (m *Sms) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sms.Unmarshal(m, b)
}
func (m *Sms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sms.Marshal(b, m, deterministic)
}
func (m *Sms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sms.Merge(m, src)
}
func (m *Sms) XXX_Size() int {
	return xxx_messageInfo_Sms.Size(m)
}
func (m *Sms) XXX_DiscardUnknown() {
	xxx_messageInfo_Sms.DiscardUnknown(m)
}

var xxx_messageInfo_Sms proto.InternalMessageInfo

func (m *Sms) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Sms) GetRunnerId() uint32 {
	if m != nil {
		return m.RunnerId
	}
	return 0
}

func (m *Sms) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Sms) GetRecipientNumber() string {
	if m != nil {
		return m.RecipientNumber
	}
	return ""
}

func (m *Sms) GetType() Sms_Type {
	if m != nil {
		return m.Type
	}
	return Sms_OUTGOING
}

func (m *Sms) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type SmsReceived struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SmsReceived) Reset()         { *m = SmsReceived{} }
func (m *SmsReceived) String() string { return proto.CompactTextString(m) }
func (*SmsReceived) ProtoMessage()    {}
func (*SmsReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9c1fe56b3bd224, []int{4}
}

func (m *SmsReceived) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SmsReceived.Unmarshal(m, b)
}
func (m *SmsReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SmsReceived.Marshal(b, m, deterministic)
}
func (m *SmsReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmsReceived.Merge(m, src)
}
func (m *SmsReceived) XXX_Size() int {
	return xxx_messageInfo_SmsReceived.Size(m)
}
func (m *SmsReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_SmsReceived.DiscardUnknown(m)
}

var xxx_messageInfo_SmsReceived proto.InternalMessageInfo

// HealthCheck
type HealthCheckRequest struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckRequest) Reset()         { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()    {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9c1fe56b3bd224, []int{5}
}

func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckRequest.Unmarshal(m, b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
}
func (m *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(m, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return xxx_messageInfo_HealthCheckRequest.Size(m)
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

func (m *HealthCheckRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type HealthCheckResponse struct {
	Status               HealthCheckResponse_ServingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=nghinhut.comstar.HealthCheckResponse_ServingStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *HealthCheckResponse) Reset()         { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()    {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9c1fe56b3bd224, []int{6}
}

func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckResponse.Unmarshal(m, b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
}
func (m *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(m, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return xxx_messageInfo_HealthCheckResponse.Size(m)
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetStatus() HealthCheckResponse_ServingStatus {
	if m != nil {
		return m.Status
	}
	return HealthCheckResponse_UNKNOWN
}

func init() {
	proto.RegisterEnum("nghinhut.comstar.Event_Type", Event_Type_name, Event_Type_value)
	proto.RegisterEnum("nghinhut.comstar.Log_Level", Log_Level_name, Log_Level_value)
	proto.RegisterEnum("nghinhut.comstar.Sms_Type", Sms_Type_name, Sms_Type_value)
	proto.RegisterEnum("nghinhut.comstar.HealthCheckResponse_ServingStatus", HealthCheckResponse_ServingStatus_name, HealthCheckResponse_ServingStatus_value)
	proto.RegisterType((*SubscriptionRequest)(nil), "nghinhut.comstar.SubscriptionRequest")
	proto.RegisterType((*Event)(nil), "nghinhut.comstar.Event")
	proto.RegisterMapType((map[string]*any.Any)(nil), "nghinhut.comstar.Event.MetadataEntry")
	proto.RegisterType((*Log)(nil), "nghinhut.comstar.Log")
	proto.RegisterType((*Sms)(nil), "nghinhut.comstar.Sms")
	proto.RegisterType((*SmsReceived)(nil), "nghinhut.comstar.SmsReceived")
	proto.RegisterType((*HealthCheckRequest)(nil), "nghinhut.comstar.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "nghinhut.comstar.HealthCheckResponse")
}

func init() { proto.RegisterFile("comstar.proto", fileDescriptor_9a9c1fe56b3bd224) }

var fileDescriptor_9a9c1fe56b3bd224 = []byte{
	// 884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0x16, 0x45, 0xd1, 0x92, 0x8e, 0x2e, 0x21, 0x26, 0xce, 0x1f, 0x5a, 0xfe, 0x91, 0x1a, 0x44,
	0x53, 0xa8, 0x5d, 0xd0, 0xae, 0xb2, 0x69, 0x83, 0x76, 0x41, 0x4b, 0x8c, 0x23, 0x44, 0xa6, 0x9c,
	0x21, 0x65, 0x2f, 0x05, 0x8a, 0x9c, 0x4a, 0x44, 0x44, 0x52, 0xe5, 0x0c, 0x05, 0x68, 0xd7, 0x4d,
	0x77, 0x5d, 0xf4, 0x09, 0xfa, 0x18, 0x7d, 0x91, 0xbe, 0x48, 0x1f, 0xa1, 0x98, 0x21, 0x19, 0xd8,
	0x96, 0xdd, 0xb4, 0x40, 0x77, 0xe7, 0xf2, 0x9d, 0xc3, 0xef, 0x5c, 0xe6, 0x10, 0x3a, 0x7e, 0x12,
	0x51, 0xe6, 0xa5, 0xc6, 0x26, 0x4d, 0x58, 0x82, 0xd4, 0x78, 0xb9, 0x0a, 0xe3, 0x55, 0xc6, 0x8c,
	0xc2, 0xde, 0x3b, 0x5a, 0x26, 0xc9, 0x72, 0x4d, 0x4e, 0x85, 0x7f, 0x91, 0xfd, 0x70, 0xea, 0xc5,
	0xbb, 0x1c, 0xdc, 0x3b, 0xbe, 0xef, 0x22, 0xd1, 0x86, 0x95, 0xce, 0x17, 0xf7, 0x9d, 0x41, 0x96,
	0x7a, 0x2c, 0x4c, 0xe2, 0xc2, 0xff, 0xd9, 0x7d, 0x3f, 0x0b, 0x23, 0x42, 0x99, 0x17, 0x6d, 0x72,
	0x80, 0xfe, 0xb3, 0x04, 0x4f, 0x9d, 0x6c, 0x41, 0xfd, 0x34, 0xdc, 0xf0, 0x38, 0x4c, 0x7e, 0xcc,
	0x08, 0x65, 0xe8, 0x7b, 0x68, 0x91, 0x2d, 0x89, 0xd9, 0x9c, 0xed, 0x36, 0x84, 0x6a, 0xd2, 0x89,
	0xdc, 0xef, 0x0e, 0xfe, 0x6f, 0xdc, 0x27, 0x6e, 0x58, 0x1c, 0x64, 0xb8, 0xbb, 0x0d, 0xc1, 0x20,
	0x02, 0xb8, 0x48, 0xd1, 0x29, 0x28, 0x34, 0x8c, 0x7d, 0xa2, 0x55, 0x4f, 0xa4, 0x7e, 0x6b, 0x70,
	0x64, 0xe4, 0x3c, 0x8c, 0x92, 0x87, 0x31, 0x2a, 0x78, 0xe2, 0x1c, 0xa7, 0xff, 0x21, 0x83, 0x22,
	0x72, 0xa1, 0x2e, 0x54, 0xc3, 0x40, 0x93, 0x4e, 0xa4, 0xbe, 0x8c, 0xab, 0x61, 0x80, 0xce, 0xa0,
	0xc6, 0x39, 0x88, 0x4c, 0x9f, 0xa2, 0x20, 0x90, 0xc8, 0x84, 0x46, 0x44, 0x98, 0x17, 0x78, 0xcc,
	0xd3, 0xe4, 0x13, 0xb9, 0xdf, 0x1a, 0xbc, 0x7c, 0x2c, 0xea, 0xb2, 0xc0, 0x59, 0x31, 0x4b, 0x77,
	0xf8, 0x63, 0x18, 0xea, 0x43, 0x4d, 0x84, 0xd7, 0x04, 0xfd, 0xc3, 0x3d, 0xfa, 0x66, 0xbc, 0xc3,
	0x02, 0x81, 0xbe, 0x05, 0xf0, 0x53, 0xe2, 0x31, 0x12, 0xcc, 0x3d, 0xa6, 0x29, 0x02, 0xdf, 0xdb,
	0xc3, 0xbb, 0x65, 0xdb, 0x71, 0xb3, 0x40, 0x9b, 0xac, 0xf7, 0x1e, 0x3a, 0x77, 0xbe, 0x8f, 0x54,
	0x90, 0x3f, 0x90, 0x9d, 0xa8, 0xbd, 0x89, 0xb9, 0x88, 0xbe, 0x02, 0x65, 0xeb, 0xad, 0xb3, 0xb2,
	0x8f, 0x0f, 0x13, 0xc9, 0x21, 0xaf, 0xab, 0xdf, 0x48, 0xfa, 0x2f, 0x12, 0xd4, 0x78, 0x27, 0x50,
	0x1d, 0xe4, 0xc9, 0xf4, 0x42, 0xad, 0xa0, 0x27, 0xd0, 0x72, 0x2e, 0x9d, 0xf9, 0x10, 0x5b, 0xa6,
	0x6b, 0x8d, 0x54, 0x40, 0x5d, 0x00, 0x6e, 0x78, 0x3f, 0xb3, 0x66, 0xd6, 0x48, 0x3d, 0x2c, 0x01,
	0x8e, 0x65, 0x8f, 0xc6, 0xf6, 0x85, 0xfa, 0x0c, 0xb5, 0xa1, 0x51, 0x18, 0x5c, 0xf5, 0x79, 0x09,
	0x7f, 0x63, 0x8e, 0x27, 0xd6, 0x48, 0x3d, 0x42, 0x2a, 0xb4, 0xb9, 0x8e, 0xad, 0xa1, 0x35, 0xbe,
	0xb6, 0x46, 0xea, 0x0b, 0x74, 0x04, 0xcf, 0xf0, 0xcc, 0xb6, 0x2d, 0x3c, 0x77, 0x5c, 0xd3, 0x9d,
	0x39, 0xf3, 0xe1, 0x5b, 0xd3, 0xbe, 0xb0, 0x1c, 0xb5, 0xaf, 0xff, 0x2a, 0x81, 0x3c, 0x49, 0x96,
	0xe8, 0x6b, 0x50, 0xd6, 0x64, 0x4b, 0xd6, 0x1a, 0x88, 0x21, 0x1e, 0xef, 0x8f, 0x63, 0x92, 0x2c,
	0x8d, 0x09, 0x87, 0xe0, 0x1c, 0x89, 0x34, 0xa8, 0x47, 0x84, 0x52, 0x6f, 0x49, 0xb4, 0x96, 0xe8,
	0x47, 0xa9, 0xea, 0xdf, 0x81, 0x22, 0x90, 0xa8, 0x09, 0xca, 0xc8, 0x3a, 0x9f, 0xf1, 0x2a, 0x1b,
	0x50, 0x1b, 0xdb, 0x6f, 0xa6, 0xaa, 0xc4, 0xa5, 0x1b, 0x13, 0xdb, 0x6a, 0x95, 0xbb, 0x2d, 0x8c,
	0xa7, 0x58, 0x95, 0xb9, 0xe8, 0x62, 0x73, 0x68, 0xa9, 0x35, 0xfd, 0xa7, 0x2a, 0xc8, 0x4e, 0x44,
	0x6f, 0xad, 0x59, 0x4d, 0xac, 0xd9, 0x31, 0x34, 0xd3, 0x2c, 0x8e, 0x49, 0x3a, 0x0f, 0x03, 0xd1,
	0xed, 0x0e, 0x6e, 0xe4, 0x86, 0x71, 0x80, 0x10, 0xd4, 0x16, 0x49, 0xb0, 0xd3, 0x64, 0xc1, 0x44,
	0xc8, 0xe8, 0x4b, 0x50, 0x53, 0xe2, 0x87, 0x9b, 0x90, 0xbf, 0x92, 0x38, 0x8b, 0x16, 0x24, 0x15,
	0xeb, 0xd2, 0xc4, 0x4f, 0x3e, 0xda, 0x6d, 0x61, 0x46, 0x46, 0xb1, 0xc2, 0x8a, 0xa8, 0xbe, 0xb7,
	0x5f, 0xbd, 0x13, 0xd1, 0xdb, 0x0b, 0x7c, 0x77, 0xa7, 0x3a, 0xff, 0x62, 0xa7, 0x74, 0xbd, 0x98,
	0x7f, 0x1b, 0x1a, 0xd3, 0x99, 0x7b, 0x31, 0xe5, 0x23, 0xad, 0x70, 0x6d, 0x6c, 0x0f, 0xa7, 0x97,
	0x5c, 0x93, 0xf4, 0x0e, 0xb4, 0x9c, 0x88, 0x62, 0xe2, 0x93, 0x70, 0x4b, 0x02, 0xdd, 0x00, 0xf4,
	0x96, 0x78, 0x6b, 0xb6, 0x1a, 0xae, 0x88, 0xff, 0xa1, 0x3c, 0x00, 0x1a, 0xd4, 0x29, 0x49, 0xb7,
	0xa1, 0x4f, 0x8a, 0x7d, 0x2c, 0x55, 0xfd, 0x37, 0x09, 0x9e, 0xde, 0x09, 0xa0, 0x9b, 0x24, 0xa6,
	0x04, 0xbd, 0x83, 0x03, 0xca, 0x3c, 0x96, 0x51, 0x11, 0xd0, 0x1d, 0xbc, 0xda, 0xaf, 0xf3, 0x81,
	0x30, 0xc3, 0xe1, 0x69, 0xe3, 0xa5, 0x23, 0x42, 0x71, 0x91, 0x42, 0x7f, 0x0d, 0x9d, 0x3b, 0x0e,
	0xd4, 0x82, 0xfa, 0xcc, 0x7e, 0x67, 0x4f, 0x6f, 0x6c, 0xb5, 0xc2, 0x15, 0xc7, 0xc2, 0xd7, 0xa2,
	0x1c, 0xbe, 0xc0, 0xf6, 0xd4, 0x9d, 0x97, 0x86, 0xea, 0xe0, 0x4f, 0x09, 0xea, 0xc3, 0xfc, 0x8b,
	0x68, 0x02, 0xc8, 0x61, 0x29, 0xf1, 0x22, 0xf1, 0xde, 0x69, 0x2e, 0xa3, 0xe7, 0x8f, 0xdc, 0x83,
	0xde, 0x63, 0x0e, 0xbd, 0xd2, 0x97, 0xce, 0x24, 0x84, 0xa1, 0x7d, 0xfb, 0x58, 0xa2, 0x07, 0xee,
	0xca, 0x03, 0xc7, 0xf4, 0x6f, 0xb2, 0x9e, 0x49, 0x68, 0x08, 0xdd, 0xab, 0x6c, 0xb1, 0x0e, 0xe9,
	0xca, 0x8c, 0xf3, 0x0b, 0xf8, 0x28, 0xbb, 0xff, 0xed, 0xed, 0x80, 0xc5, 0xff, 0x05, 0x7a, 0x65,
	0xf0, 0xbb, 0x04, 0x07, 0x79, 0x73, 0x91, 0x0b, 0x8a, 0x68, 0x30, 0xfa, 0xfc, 0x13, 0xfd, 0xcf,
	0xb9, 0xbd, 0xfc, 0x47, 0x53, 0x42, 0xd7, 0xa0, 0xdc, 0x78, 0xcc, 0x5f, 0xfd, 0xa7, 0x59, 0xcf,
	0xa4, 0xf3, 0x2f, 0xe0, 0xd0, 0x4f, 0xa2, 0x3d, 0xf4, 0x79, 0xbb, 0x18, 0xe0, 0x15, 0xaf, 0xf4,
	0x4a, 0x5a, 0x1c, 0x88, 0x92, 0x5f, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0x25, 0x9c, 0xcf, 0x5b,
	0x4a, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ComstarClient is the client API for Comstar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ComstarClient interface {
	// Event RPCs
	StreamEventsStream(ctx context.Context, opts ...grpc.CallOption) (Comstar_StreamEventsStreamClient, error)
	Subscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (Comstar_SubscriptionClient, error)
	//  rpc Subscription(google.protobuf.Empty) returns (stream Event) {}
	PublishAnEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*empty.Empty, error)
}

type comstarClient struct {
	cc *grpc.ClientConn
}

func NewComstarClient(cc *grpc.ClientConn) ComstarClient {
	return &comstarClient{cc}
}

func (c *comstarClient) StreamEventsStream(ctx context.Context, opts ...grpc.CallOption) (Comstar_StreamEventsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Comstar_serviceDesc.Streams[0], "/nghinhut.comstar.Comstar/StreamEventsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &comstarStreamEventsStreamClient{stream}
	return x, nil
}

type Comstar_StreamEventsStreamClient interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type comstarStreamEventsStreamClient struct {
	grpc.ClientStream
}

func (x *comstarStreamEventsStreamClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *comstarStreamEventsStreamClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *comstarClient) Subscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (Comstar_SubscriptionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Comstar_serviceDesc.Streams[1], "/nghinhut.comstar.Comstar/Subscription", opts...)
	if err != nil {
		return nil, err
	}
	x := &comstarSubscriptionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Comstar_SubscriptionClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type comstarSubscriptionClient struct {
	grpc.ClientStream
}

func (x *comstarSubscriptionClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *comstarClient) PublishAnEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nghinhut.comstar.Comstar/PublishAnEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComstarServer is the server API for Comstar service.
type ComstarServer interface {
	// Event RPCs
	StreamEventsStream(Comstar_StreamEventsStreamServer) error
	Subscription(*SubscriptionRequest, Comstar_SubscriptionServer) error
	//  rpc Subscription(google.protobuf.Empty) returns (stream Event) {}
	PublishAnEvent(context.Context, *Event) (*empty.Empty, error)
}

// UnimplementedComstarServer can be embedded to have forward compatible implementations.
type UnimplementedComstarServer struct {
}

func (*UnimplementedComstarServer) StreamEventsStream(srv Comstar_StreamEventsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEventsStream not implemented")
}
func (*UnimplementedComstarServer) Subscription(req *SubscriptionRequest, srv Comstar_SubscriptionServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscription not implemented")
}
func (*UnimplementedComstarServer) PublishAnEvent(ctx context.Context, req *Event) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAnEvent not implemented")
}

func RegisterComstarServer(s *grpc.Server, srv ComstarServer) {
	s.RegisterService(&_Comstar_serviceDesc, srv)
}

func _Comstar_StreamEventsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComstarServer).StreamEventsStream(&comstarStreamEventsStreamServer{stream})
}

type Comstar_StreamEventsStreamServer interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type comstarStreamEventsStreamServer struct {
	grpc.ServerStream
}

func (x *comstarStreamEventsStreamServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *comstarStreamEventsStreamServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Comstar_Subscription_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ComstarServer).Subscription(m, &comstarSubscriptionServer{stream})
}

type Comstar_SubscriptionServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type comstarSubscriptionServer struct {
	grpc.ServerStream
}

func (x *comstarSubscriptionServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Comstar_PublishAnEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComstarServer).PublishAnEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nghinhut.comstar.Comstar/PublishAnEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComstarServer).PublishAnEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _Comstar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nghinhut.comstar.Comstar",
	HandlerType: (*ComstarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishAnEvent",
			Handler:    _Comstar_PublishAnEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEventsStream",
			Handler:       _Comstar_StreamEventsStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscription",
			Handler:       _Comstar_Subscription_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "comstar.proto",
}

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthClient interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (Health_WatchClient, error)
}

type healthClient struct {
	cc *grpc.ClientConn
}

func NewHealthClient(cc *grpc.ClientConn) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/nghinhut.comstar.Health/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthClient) Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (Health_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Health_serviceDesc.Streams[0], "/nghinhut.comstar.Health/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Health_WatchClient interface {
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type healthWatchClient struct {
	grpc.ClientStream
}

func (x *healthWatchClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HealthServer is the server API for Health service.
type HealthServer interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Watch(*HealthCheckRequest, Health_WatchServer) error
}

// UnimplementedHealthServer can be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (*UnimplementedHealthServer) Check(ctx context.Context, req *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedHealthServer) Watch(req *HealthCheckRequest, srv Health_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterHealthServer(s *grpc.Server, srv HealthServer) {
	s.RegisterService(&_Health_serviceDesc, srv)
}

func _Health_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nghinhut.comstar.Health/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Health_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HealthServer).Watch(m, &healthWatchServer{stream})
}

type Health_WatchServer interface {
	Send(*HealthCheckResponse) error
	grpc.ServerStream
}

type healthWatchServer struct {
	grpc.ServerStream
}

func (x *healthWatchServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Health_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nghinhut.comstar.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Health_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Health_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "comstar.proto",
}
