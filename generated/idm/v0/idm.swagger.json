{
  "swagger": "2.0",
  "info": {
    "title": "idm.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v0/health": {
      "get": {
        "summary": "https://github.com/grpc/grpc/blob/master/doc/health-checking.md",
        "operationId": "Check",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0HealthCheckResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "IdentityManagement"
        ]
      }
    },
    "/v0/users": {
      "get": {
        "summary": "/ the default rpc use for listing users",
        "operationId": "ListUsersStream",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/v0User"
            }
          }
        },
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "IdentityManagement"
        ]
      },
      "post": {
        "operationId": "CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v0User"
            }
          }
        ],
        "tags": [
          "IdentityManagement"
        ]
      }
    },
    "/v0/users/{sub}": {
      "delete": {
        "operationId": "DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "sub",
            "description": "OpenId Standard Claims Members (https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims)\nSubject - Identifier for the End-User at the Issuer.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "name",
            "description": "End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "given_name",
            "description": "Given name(s) or first name(s) of the End-User.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "family_name",
            "description": "Surname(s) or last name(s) of the End-User.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "middle_name",
            "description": "Middle name(s) of the End-User.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "nickname",
            "description": "Casual name of the End-User.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "preferred_username",
            "description": "Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe.\nThis value MAY be any valid JSON string including special characters such as @, /, or whitespace (not unique!, see https://openid.net/specs/openid-connect-basic-1_0.html#ClaimStability).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "profile",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "picture",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "website",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "description": "RFC5322  (not unique!, see https://openid.net/specs/openid-connect-basic-1_0.html#ClaimStability).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email_verified",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "gender",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "birthdate",
            "description": "ISO 8601:2004 YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "zoneinfo",
            "description": "String from zoneinfo time zone database (the tz database) representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locale",
            "description": "End-User's locale, represented as a BCP47 [RFC5646] language tag.\nThis is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA.\nAs a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone_number",
            "description": "Ex: +1 (425) 555-1212 or +56 (2) 687 2400   (E.164)\n or +1 (604) 555-1234;ext=5678              (RFC3966)\nsee E.164/RFC3966.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone_number_verified",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "address.formatted",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "address.street_address",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "address.locality",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "address.region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "address.postal_code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "address.country",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "updated_at",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "IdentityManagement"
        ]
      },
      "put": {
        "operationId": "UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "sub",
            "description": "OpenId Standard Claims Members (https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims)\nSubject - Identifier for the End-User at the Issuer.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v0User"
            }
          }
        ],
        "tags": [
          "IdentityManagement"
        ]
      }
    }
  },
  "definitions": {
    "HealthCheckResponseServingStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SERVING",
        "NOT_SERVING"
      ],
      "default": "UNKNOWN"
    },
    "UserAddress": {
      "type": "object",
      "properties": {
        "formatted": {
          "type": "string"
        },
        "street_address": {
          "type": "string"
        },
        "locality": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      },
      "title": "https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v0HealthCheckResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/HealthCheckResponseServingStatus"
        }
      }
    },
    "v0User": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "format": "boolean"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "title": "google.protobuf.Timestamp created_at = 101;     // ???"
        },
        "sub": {
          "type": "string",
          "description": "OpenId Standard Claims Members (https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims)\nSubject - Identifier for the End-User at the Issuer."
        },
        "name": {
          "type": "string",
          "description": "End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences."
        },
        "given_name": {
          "type": "string",
          "description": "Given name(s) or first name(s) of the End-User."
        },
        "family_name": {
          "type": "string",
          "title": "Surname(s) or last name(s) of the End-User"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name(s) of the End-User"
        },
        "nickname": {
          "type": "string",
          "title": "Casual name of the End-User"
        },
        "preferred_username": {
          "type": "string",
          "title": "Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe.\nThis value MAY be any valid JSON string including special characters such as @, /, or whitespace (not unique!, see https://openid.net/specs/openid-connect-basic-1_0.html#ClaimStability)"
        },
        "profile": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "title": "RFC5322  (not unique!, see https://openid.net/specs/openid-connect-basic-1_0.html#ClaimStability)"
        },
        "email_verified": {
          "type": "boolean",
          "format": "boolean"
        },
        "gender": {
          "type": "string"
        },
        "birthdate": {
          "type": "string",
          "description": "ISO 8601:2004 YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed."
        },
        "zoneinfo": {
          "type": "string",
          "description": "String from zoneinfo time zone database (the tz database) representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles."
        },
        "locale": {
          "type": "string",
          "description": "End-User's locale, represented as a BCP47 [RFC5646] language tag.\nThis is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA.\nAs a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well."
        },
        "phone_number": {
          "type": "string",
          "title": "Ex: +1 (425) 555-1212 or +56 (2) 687 2400   (E.164)\n or +1 (604) 555-1234;ext=5678              (RFC3966)\nsee E.164/RFC3966"
        },
        "phone_number_verified": {
          "type": "boolean",
          "format": "boolean"
        },
        "address": {
          "$ref": "#/definitions/UserAddress"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "Compatible with OIDC (OpenID Connect)",
      "title": "*\nRepresents the user"
    }
  },
  "x-stream-definitions": {
    "v0HealthCheckResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v0HealthCheckResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v0HealthCheckResponse"
    },
    "v0User": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v0User"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v0User"
    }
  }
}
